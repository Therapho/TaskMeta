// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using TaskMeta.Shared.Models;

namespace TaskMeta.Data.Services;

public partial class ApplicationDbContext : IdentityDbContext<ApplicationUser>
{
#if DEBUG
    public ApplicationDbContext() :base(BuildOptions())
    {
    }

    private static DbContextOptions BuildOptions()
    {
        return new DbContextOptionsBuilder()
            .UseSqlServer("Server=(localdb)\\mssqllocaldb;Database=TaskMetaDev;Trusted_Connection=True;MultipleActiveResultSets=true")
            .Options;
    }
#endif

    public ApplicationDbContext(DbContextOptions<IdentityDbContext<ApplicationUser>> options)
        : base(options)
    {
    }

    public virtual DbSet<Fund> Funds { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<TaskActivity> TaskActivities { get; set; }

    public virtual DbSet<TaskDefinition> TaskDefinitions { get; set; }

    public virtual DbSet<TaskWeek> TaskWeeks { get; set; }

    public virtual DbSet<TransactionCategory> TransactionCategories { get; set; }

    public virtual DbSet<TransactionLog> TransactionLogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Fund>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tmp_ms_x__3214EC07A56E5A2D");

            entity.Property(e => e.TargetBalance).HasDefaultValue(0.0m);
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Status__3214EC070AA3A213");
        });

        modelBuilder.Entity<TaskActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tmp_ms_x__3214EC0772780ACB");

            entity.HasOne(d => d.TaskWeek).WithMany(p => p.TaskActivities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskActivities_TaskWeeks");
        });

        modelBuilder.Entity<TaskDefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskDefinition");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.HasOne(d => d.User).WithMany(p => p.TaskDefinitionUsers).HasConstraintName("FK_TaskDefinitions_AspNetUsers");
        });

        modelBuilder.Entity<TransactionCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__3214EC0735F1E75C");

            entity.Property(e => e.Name).IsFixedLength();
        });

        modelBuilder.Entity<TransactionLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tmp_ms_x__3214EC07B4738D25");

            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.SourceFund).WithMany(p => p.TransactionLogSourceFunds).HasConstraintName("FK_TransactionLog_SourceFund");

            entity.HasOne(d => d.TargetFund).WithMany(p => p.TransactionLogTargetFunds).HasConstraintName("FK_TransactionLog_TargetFund");
            entity.HasOne(d => d.Category).WithMany(p => p.TransactionLogs).OnDelete(DeleteBehavior.ClientSetNull)
             .HasConstraintName("FK_TransactionLog_Category");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}